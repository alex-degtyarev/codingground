#include <iostream>
#include <math.h>
using namespace std;

#define PI 3.141592653589793238462643383279
/*
float arrayFFTRe[] = {
    2.62946, 0.310214, 2.64179, 0.313142, 2.67951, 0.319168, 2.74484, 
0.328659, 2.8419, 0.342237, 2.97735, 0.360887, 3.16169, 0.386165, 
3.41158, 0.42057, 3.75438, 0.468318, 4.23761, 0.537006, 4.95094, 
0.641766, 6.08506, 0.817521, 8.12831, 1.16683, 12.8158, 2.17659, 
34.1089, 33.0871, -43.227, -2.32096, -12.6014, -1.08217, -7.17452, 
-0.68979, -4.9201, -0.497982, -3.69014, -0.384677, -2.91837, 
-0.310123, -2.3907, -0.257511, -2.00829, -0.218511, -1.71925, 
-0.188526, -1.49367, -0.164814, -1.31316, -0.145637, -1.16577, 
-0.129841, -1.04339, -0.11663, -0.94036, -0.105439, -0.852575, 
-0.0958525, -0.777009, -0.0875625, -0.711376, -0.080333, -0.653921, 
-0.0739814, -0.60327, -0.068364, -0.558339, -0.0633664, -0.518254, 
-0.0588962, -0.482311, -0.0548784, -0.449931, -0.0512509, -0.420635, 
-0.0479624, -0.394027, -0.04497, -0.36977, -0.0422374, -0.347583, 
-0.039734, -0.327226, -0.0374336, -0.308492, -0.0353137, -0.291205, 
-0.0333548, -0.275211, -0.0315403, -0.260378, -0.0298555, -0.246588, 
-0.0282875, -0.233742, -0.0268252, -0.221748, -0.0254586, -0.210528, 
-0.0241789, -0.200012, -0.0229784, -0.190138, -0.0218501, -0.18085, 
-0.0207879, -0.172098, -0.0197861, -0.163837, -0.0188399, -0.156029, 
-0.0179448, -0.148636, -0.0170966, -0.141626, -0.0162918, -0.134969, 
-0.0155269, -0.128638, -0.014799, -0.122609, -0.0141054, -0.11686, 
-0.0134434, -0.111369, -0.0128108, -0.106119, -0.0122055, -0.101092, 
-0.0116256, -0.0962719, -0.0110692, -0.0916448, -0.0105347, 
-0.087197, -0.0100206, -0.082916, -0.00952542, -0.0787903, 
-0.00904792, -0.0748091, -0.00858687, -0.0709626, -0.00814111, 
-0.0672414, -0.00770961, -0.0636368, -0.00729136, -0.0601408, 
-0.00688544, -0.0567456, -0.00649098, -0.0534441, -0.00610716, 
-0.0502297, -0.00573321, -0.0470958, -0.0053684, -0.0440365, 
-0.00501205, -0.0410462, -0.00466348, -0.0381193, -0.00432209, 
-0.0352507, -0.00398728, -0.0324355, -0.00365848, -0.029669, 
-0.00333513, -0.0269466, -0.00301673, -0.0242639, -0.00270276, 
-0.0216167, -0.00239274, -0.0190011, -0.00208619, -0.0164129, 
-0.00178265, -0.0138483, -0.00148167, -0.0113036, -0.00118281, 
-0.00877508, -0.000885642, -0.00625903, -0.000589731, -0.00375187, 
-0.000294656, -0.00125003 };
*/
/*float arrayFFTRe[] = {
    2.62946, 2.63986, 2.67168, 2.72679, 2.80867, 2.92294, 3.07846, 
3.28929, 3.57851, 3.98624, 4.58815, 5.54515, 7.26935, 11.225, 
29.1943, -36.0699, -10.225, -5.64538, -3.74302, -2.70521, -2.05408, 
-1.60895, -1.28643, -1.04269, -0.852535, -0.700419, -0.576258, 
-0.473221, -0.386517, -0.312691, -0.249187, -0.194076, -0.145877, 
-0.103432, -0.0658235, -0.0323171, -0.00231702, 0.0246647, 0.0490313, 
0.0711184, 0.091208, 0.109538, 0.126312, 0.141703, 0.155859, 
0.168911, 0.180969, 0.192131, 0.202484, 0.212102, 0.221051, 0.229391, 
0.237174, 0.244445, 0.251247, 0.257617, 0.263588, 0.269191, 0.274451, 
0.279395, 0.284043, 0.288417, 0.292534, 0.296412, 0.300065, 0.303506, 
0.30675, 0.309808, 0.312689, 0.315404, 0.317962, 0.320371, 0.322639, 
0.324772, 0.326777, 0.32866, 0.330426, 0.332081, 0.333628, 0.335072, 
0.336417, 0.337667, 0.338824, 0.339892, 0.340873, 0.341769, 0.342584, 
0.343318, 0.343975, 0.344554, 0.345058, 0.345488, 0.345845, 0.346129, 
0.346342, 0.346483, 0.346554, 0.346554, 0.346483, 0.346342, 0.346129, 
0.345845, 0.345488, 0.345058, 0.344554, 0.343975, 0.343318, 0.342584, 
0.341769, 0.340873, 0.339892, 0.338824, 0.337667, 0.336417, 0.335072, 
0.333628, 0.332081, 0.330426, 0.32866, 0.326777, 0.324772, 0.322639, 
0.320371, 0.317962, 0.315404, 0.312689, 0.309808, 0.30675, 0.303506, 
0.300065, 0.296412, 0.292534, 0.288417, 0.284043, 0.279395, 0.274451, 
0.269191, 0.263588, 0.257617, 0.251247, 0.244445, 0.237174, 0.229391, 
0.221051, 0.212102, 0.202484, 0.192131, 0.180969, 0.168911, 0.155859, 
0.141703, 0.126312, 0.109538, 0.091208, 0.0711184, 0.0490313, 
0.0246647, -0.00231702, -0.0323171, -0.0658235, -0.103432, -0.145877, 
-0.194076, -0.249187, -0.312691, -0.386517, -0.473221, -0.576258, 
-0.700419, -0.852535, -1.04269, -1.28643, -1.60895, -2.05408, 
-2.70521, -3.74302, -5.64538, -10.225, -36.0699, 29.1943, 11.225, 
7.26935, 5.54515, 4.58815, 3.98624, 3.57851, 3.28929, 3.07846, 
2.92294, 2.80867, 2.72679, 2.67168, 2.63986
};
*/

double inputArray[] = 
{
5., 8.40311, 9.95135, 9.30296, 6.60108, 2.44209, -2.25595, -6.45603, 
-9.23102, -9.96839, -8.50538, -5.16491, -0.68437, 3.94724, 7.70755, 
9.76653, 9.66967, 7.43837, 3.56515, -1.09503, -5.51349, -8.71493, 
-9.99267, -9.06466, -6.13575, -1.85246, 2.83974, 6.9051, 9.44626, 
9.90228, 8.17251, 4.63877, 0.0810834, -4.4945, -8.07798, -9.87836, 
-9.49823, -7.02149, -2.99485, 1.69286, 6.00689, 8.99499, 9.99756, 
8.79331, 5.64806, 1.25607, -3.41318, -7.32901, -9.62707, -9.80008, 
-7.80986, -4.09572, 0.522498, 5.02538, 8.41897, 9.9542, 9.29217, 
6.57902, 2.41364, -2.28452, -6.4784, -9.24226, -9.96602, -8.48991, 
-5.13978, -0.655107, 3.97417, 7.7262, 9.77278, 9.66215, 7.41874, 
3.53773, -1.12418, -5.53794, -8.72928, -9.99375, -9.05223, -6.11256, 
-1.82363, 2.86785, 6.92629, 9.45584, 9.89815, 8.15557, 4.61277, 
0.0517553, -4.52068, -8.09524, -9.88288, -9.48901, -7.00058, 
-2.96686, 1.72176, 6.03031, 9.00776, 9.99687, 8.77931, 5.62383, 
1.22697, -3.44073, -7.34893, -9.63496, -9.7942, -7.79151, -4.06894, 
0.551785, 5.05071, 8.43476, 9.95696, 9.28129, 6.5569, 2.38517, 
-2.31306, -6.50071, -9.25342, -9.96356, -8.47438, -5.1146, -0.625838, 
4.00107, 7.74479, 9.77896, 9.65455, 7.39904, 3.51029, -1.15331, 
-5.56234, -8.74355, -9.99474, -9.03973, -6.08932, -1.79478, 2.89593, 
6.94741, 9.46534, 9.89393, 8.13857, 4.58672, 0.0224267, -4.54682, 
-8.11242, -9.88731, -9.47972, -6.9796, -2.93884, 1.75064, 6.05368, 
9.02046, 9.99609, 8.76523, 5.59955, 1.19786, -3.46825, -7.36879, 
-9.64277, -9.78824, -7.77309, -4.04213, 0.581067, 5.076, 8.45048, 
9.95963, 9.27033, 6.53473, 2.35667, -2.34158, -6.52297, -9.2645, 
-9.96101, -8.45877, -5.08937, -0.596564, 4.02793, 7.76331, 9.78505, 
9.64687, 7.37928, 3.48281, -1.18244, -5.58668, -8.75774, -9.99565, 
-9.02715, -6.06603, -1.76592, 2.92399, 6.96848, 9.47476, 9.88963, 
8.12149, 4.56064, -0.00690209, -4.57292
};

int main()
{
   //int N = sizeof(arrayFFTRe)/sizeof(float);
   int N = sizeof(inputArray)/sizeof(double);
   double arrayFFTRe[N];
   double fft_summ =0.0;
   cout << "cosinuse DFT:" << endl;
   int idx = 0;
   int v1_countSumm, v1_countMultiple, v1_countCos,
       v2_countSumm, v2_countMultiple = 0;
   v1_countCos=0;v1_countMultiple=0; v1_countSumm=0; v2_countSumm=0; v2_countMultiple=0;
   for (int s = 0; s<N; ++s)
   {
        fft_summ =0;
        for(int k = 0; k<N;++k)
          {
              fft_summ+=inputArray[k]*cos( (PI/double(N)) * double(k-0.5) * double(s));
            v1_countSumm+=2;
            v1_countMultiple+=4;
              v1_countCos++;
          }
        arrayFFTRe[s] = fft_summ/sqrt(N);
         v1_countMultiple+=1;
        //cout << arrayFFTRe[s] << ",";
   }
   cout <<endl<< "End of cosinuse DFT:" << endl;
   
   double inputFFT[2*N];
   double output[N];
   for (int i=0;i<2*N; i++)
        if(i<N)
            inputFFT[i] = arrayFFTRe[i];
        else
            inputFFT[i] = 0.0;
    double min, max = 0;
    double summ = 0;
    for(int i=0; i<N; i++)
    {
        summ =0;
        for(int k = 0; k<2*N;k++)
           { 
               summ+=inputFFT[k]*inputFFT[k]*cos(2*PI*i*k/(2*N-1));
               v1_countSumm+=2;
                v1_countMultiple+=5;
                 v1_countCos++;
            }
            // cout << summ << "," << "<<||>>";
        output[i]= summ/double((2*N-1));
        v1_countMultiple+=2;
        cout << output[i] << ",";
        if(output[i]<min) min = output[i];
        if(output[i]>max) max = output[i];
        
    }
    
   cout << endl << "Hello World" << endl << sizeof(arrayFFTRe)/sizeof(double) << endl;
   cout << "Min = " << min << "     Max = "<< max << endl;
   
   
  cout << "Autocorrelation: "<<endl;
  float corr_summ = 0;
  idx = 0;
  for(int n=0; n<N; ++n)
  {
      corr_summ = 0;
      for(int i=1; i<=N-n; ++i)
            {
                corr_summ+=inputArray[i]*inputArray[n+i];
                v2_countSumm+=2;
                v2_countMultiple++;
               // cout <<corr_summ << "," << "i=" <<i << "n=" << "N="<<N <<endl;
            }
    output[n] = corr_summ/double(N);
    v2_countMultiple++;
    cout << output[n] << ",";      
    idx++;    
  }
   cout <<endl;
   cout << "v1_countSumm = " << v1_countSumm << "v1_countMultiple="<<v1_countMultiple<< "v1_countCos=" <<v1_countCos<<"<<"<<endl;
   cout <<"v2_countSumm="<< v2_countSumm <<"v2_countMultiple="<<v2_countMultiple << endl;
      
   return 0;
}


